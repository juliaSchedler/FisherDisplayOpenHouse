---
title: "emotion"
format: html
---

## what is the modal chord

```{r}
possible_scales <- c("major", "minor", "dorian", "phrygian", "lydian", "lydianAugmented", "acoustic", "mixolydian", "locrian", "majorLocrian", "harmonicMajor", "harmonicMinor", "halfDiminished", "minorPentatonic", "majorPentatonic", "blues", "altered", "hirajoshi", "insen", "algerian", "hungarian", "in") 

scale_lengths <- data.frame(len = rep(NA, times = length(possible_scales)), 
                            possible_scales)
## what is the length of each possible scale
i = 1
for(music_scale in possible_scales){
  scale_lengths[i,1] <- length(buildScale("E5", music_scale, play = T, plot = T))
  invisible(readline(prompt="Press [enter] to continue"))
  i = i + 1
}


eight_notes <- filter(scale_lengths, len == 08)

library(tidyverse)
library(gm);
library(music)

source("data_to_sonif.r")

## music setup

## source https://gist.github.com/dimitre/439f5ab75a0c2e66c8c63fc9e8f7ea77

freq_notes_all <- read.csv("note_freq_440_432.csv")
freq_notes_all$note_names <- paste0(freq_notes_all$A,freq_notes_all$X0)


## filter to 2 octaves
freq_notes <- freq_notes_all %>% filter(X0 %in% c(4, 5)) %>% add_row(freq_notes_all[63,])
getnotenames <- freq_notes$note_names
names(getnotenames) <- freq_notes$X27.5


## read in the data 

urb_T_all <- read.csv("urban_tree.csv")


## just keep the raw data

urb_T <- urb_T_all[,1:9]
## rename variables for easier coding
names(urb_T) <- c("tract", "county", "city","zip", "heat",
                  "pov", "asth","pm2_5","canopy")
## reproduce Aaron's computations
urb_T <- urb_T %>%
    mutate(
      heat_s = scale(heat),
      pov_s = scale(pov),
      asth_s = scale(asth),
      pm2_5_s = scale(pm2_5),
      canopy_s = scale(canopy),
      vuln = heat_s + pov_s + asth_s + pm2_5_s
    )

## get sonification
  sonif <- data_to_sonif(as.vector(urb_T$heat))


```

```{r}
get_possible_scales <- function(sonif){
  
  
  ## buildScale for each possible one, then do lookup with actual sonification
## thanks to sebastian-c on stack exchange: https://stackoverflow.com/questions/14543627/extracting-numbers-from-vectors-of-strings
  
iter <- 1
for(music_scale in eight_notes$possible_scales){
  matches <- regmatches(sonif, gregexpr("[[:digit:]]+", sonif))
  octave_num <- as.numeric(unlist(matches))[1:6]
  matches <- regmatches(sonif, gregexpr("[[:digit:]]+", sonif), invert = T)
  note_name <- unlist(lapply(matches, function(x) paste0(x[1], x[2])))[1:6]
  
  
  lower_limit <- min(octave_num)-1
  
  ## below is based on using two octaves for the auditory boxplot
  entire_range <- c(buildScale(paste0(note_name[1], lower_limit), scale = music_scale, formatNotation = F), 
                    buildScale(paste0(note_name[1], lower_limit + 1), scale = music_scale, formatNotation = F)[-1],
                    buildScale(paste0(note_name[1], lower_limit + 2), scale = music_scale, formatNotation = F)[-1],
                    buildScale(paste0(note_name[1], lower_limit + 3), scale = music_scale, formatNotation = F)
  )
  
  if(iter == 1){
    all_possible_scales <- data.frame(matrix(rep(NA, 
                                      times = length(entire_range)*length(eight_notes$possible_scales)), 
                                  nrow = length(entire_range)))
     names(all_possible_scales) <- eight_notes$possible_scales
     iter = iter + 1
  }
  #print(music_scale)
  all_possible_scales[[music_scale]] <- entire_range
  
}
return(all_possible_scales)
}
```

```{r}
sonif_poss <- get_possible_scales(sonif)
```

```{r}
## which scale does the sonification overlap with?

fSonif <- formatNote(sonif[1:6])
eight_notes$overlap <- rep(NA, times = nrow(eight_notes))
i = 1
for(music_scale in eight_notes$possible_scales){
  eight_notes[i, "overlap"] <- sum(sonif_poss[[music_scale]] %in% fSonif)
  i = i + 1
}
```

## not quite right to identify the notes... it's about the intervals

```{r}
## divide into consonant and dissonant
noteDistance(sonif, lag(sonif))

cons <- read.csv("data/consonance.csv")

## proportion of 5 intervals that are consonant
prop_cons <- sum(cons[cons$semitone.distance %in% abs(noteDistance(sonif[1:6])), "consonant"])/5

## is the last interval consonant?
last_cons <- cons[cons$semitone.distance %in% abs(noteDistance(sonif[1:6]))[6], "consonant"]

## is the first interval consonant?
first_cons <- cons[cons$semitone.distance %in% abs(noteDistance(sonif[1:6]))[1], "consonant"]
```

## for the training

```{r}
## read in the data 
all_data <- read.csv("data/all_data_train.csv")

prop_cons <- last_cons <- first_cons <- NULL
for(i in 1:6){
  ## create sonification for i_th dist
  sonif <-  data_to_sonif(all_data$data[all_data$id == i])[1:6]
  note_dists <- abs(noteDistance(sonif[1:6]))[2:6] ## remove first because it's distance to itself
  ## proportion of 5 intervals that are consonant
  
  is_cons <- left_join(data.frame(note_dists), cons, join_by(note_dists == semitone.distance))[,2] 
prop_cons <- c(prop_cons, sum(is_cons)/5)

## is the last interval consonant?
last_cons <- c(last_cons, cons[cons$semitone.distance %in% note_dists[5], "consonant"])

## is the first interval consonant?
first_cons <- c(first_cons, cons[cons$semitone.distance %in% note_dists[1], "consonant"])
}


emotion_data <- data.frame(id = 1:6, prop_cons, first_cons, last_cons)


write.csv(emotion_data, "emotion_data_train.csv")
```

## for the testing data

```{r}
## read in the data 
all_data <- read.csv("data/all_data_test.csv")

prop_cons <- last_cons <- first_cons <- NULL
for(i in 1:27){
  ## create sonification for i_th dist
  sonif <-  data_to_sonif(all_data$data[all_data$id == i])[1:6]
  note_dists <- abs(noteDistance(sonif[1:6]))[2:6] ## remove first because it's distance to itself
  ## proportion of 5 intervals that are consonant
  
  is_cons <- left_join(data.frame(note_dists), cons, join_by(note_dists == semitone.distance))[,2] 
prop_cons <- c(prop_cons, sum(is_cons)/5)

## is the last interval consonant?
last_cons <- c(last_cons, cons[cons$semitone.distance %in% note_dists[5], "consonant"])

## is the first interval consonant?
first_cons <- c(first_cons, cons[cons$semitone.distance %in% note_dists[1], "consonant"])
}

emotion_data <- data.frame(id = 1:27, prop_cons, first_cons, last_cons)


write.csv(emotion_data, "emotion_data_test.csv")
```
